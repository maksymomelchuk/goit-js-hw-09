{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SAoBA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,uBAAqBN,QAAiBC,OAE5CM,EAAK,sBAAoBP,QAAeC,MAAU,GAErDA,EAAM,G,CA1BGQ,SAASC,cAAc,SAG/BC,iBAAiB,UAAUC,IACjCA,EAAMC,iBAEN,IAAIC,EAAYC,OAAOH,EAAMI,OAAO,GAAGC,OAEvC,IAAK,IAAIC,EAAI,EAAGA,GAAKN,EAAMI,OAAO,GAAGC,MAAOC,GAAK,EAAG,CAClCnB,EAAcmB,EAAGJ,GAE9BK,MAAKF,GAASG,EAAAvB,GAASwB,OAAOC,QAAQL,KACtCM,OAAMN,GAASG,EAAAvB,GAASwB,OAAOG,QAAQP,KAC1CH,GAAaC,OAAOH,EAAMI,OAAO,GAAGC,M","sources":["src/js/03-promises.js"],"sourcesContent":["// Import Notification library\nimport Notiflix from 'notiflix';\n\n// Form query selector\nconst formRef = document.querySelector('.form');\n\n// Form event listener\nformRef.addEventListener('submit', event => {\n  event.preventDefault();\n\n  let timeDelay = Number(event.target[0].value);\n  // Iteration over amount\n  for (let i = 1; i <= event.target[2].value; i += 1) {\n    const promise = createPromise(i, timeDelay);\n    promise\n      .then(value => Notiflix.Notify.success(value))\n      .catch(value => Notiflix.Notify.failure(value));\n    timeDelay += Number(event.target[1].value);\n  }\n});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","event","preventDefault","timeDelay","Number","target","value","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.8fc848e8.js.map"}